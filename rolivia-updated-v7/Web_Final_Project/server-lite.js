const ADMIN_KEY = process.env.ADMIN_KEY || 'secret123';
const express = require('express'); const cors = require('cors'); const fs = require('fs'); const path = require('path');
const app = express(); const PORT = process.env.PORT || 3000;
const PUBLIC_DIR = path.join(__dirname, 'public'); const DATA_DIR = path.join(__dirname, 'data'); const DB_FILE = path.join(DATA_DIR, 'db.json');
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
if (!fs.existsSync(DB_FILE)) fs.writeFileSync(DB_FILE, JSON.stringify({ orders: [], comments: [], visits: [] }, null, 2));
app.use(cors()); app.use(express.json()); app.use(express.static(PUBLIC_DIR)); app.use('/vendor', express.static(path.join(__dirname, 'node_modules')));
function readDB(){ try { return JSON.parse(fs.readFileSync(DB_FILE, 'utf8')); } catch { return { orders: [], comments: [], visits: [] }; } }
function writeDB(d){ fs.writeFileSync(DB_FILE, JSON.stringify(d, null, 2)); }
app.post('/api/orders',(req,res)=>{ const { productId, priceIls } = req.body || {}; const db = readDB(); const rec = { id: db.orders.length?db.orders[db.orders.length-1].id+1:1, product_id: productId || null, price_ils: Number(priceIls)||null, created_at: new Date().toISOString() }; db.orders.push(rec); writeDB(db); res.json({ ok:true, id:rec.id }); });
app.get('/api/comments',(req,res)=>{ const db=readDB(); const only=req.query.approved!=='0'; const items= only? db.comments.filter(c=>c.approved===1) : db.comments; items.sort((a,b)=>b.id-a.id); res.json(items.slice(0, only?50:100)); });
app.post('/api/comments',(req,res)=>{ const { name, message, rating } = req.body || {}; if(!name || !message) return res.status(400).json({ error:'missing_fields' }); const db=readDB(); const rec={ id:db.comments.length?db.comments[db.comments.length-1].id+1:1, name:String(name).slice(0,60), message:String(message).slice(0,1000), rating:Math.max(1,Math.min(5, Number(rating)||5)), approved:0, created_at:new Date().toISOString() }; db.comments.push(rec); writeDB(db); res.json({ ok:true, id:rec.id }); });
app.put('/api/comments/:id/approve',(req,res)=>{ const key=req.headers['x-admin-key'] || req.query.key; if(key!==ADMIN_KEY) return res.status(403).json({ error:'forbidden' }); const id=Number(req.params.id); const db=readDB(); const idx=db.comments.findIndex(c=>c.id===id); if(idx===-1) return res.status(404).json({ error:'not_found' }); db.comments[idx].approved=1; writeDB(db); res.json({ ok:true, updated:1 }); });
app.get('/api/visit',(req,res)=>{ const sid=String(req.query.sid||'').slice(0,60); if(!sid) return res.json({ ok:true, skip:true }); const db=readDB(); const idx=db.visits.findIndex(v=>v.sid===sid); const now=new Date().toISOString(); if(idx===-1) db.visits.push({ sid, first_at:now, last_at:now, count:1 }); else { db.visits[idx].last_at=now; db.visits[idx].count++; } writeDB(db); res.json({ ok:true }); });
app.get('/api/stats/summary',(req,res)=>{ const db=readDB(); const approved=db.comments.filter(c=>c.approved===1); const rating=approved.length? approved.reduce((s,c)=>s+(c.rating||5),0)/approved.length : 5; const weekly=[]; for(let i=6;i>=0;i--){ const d=new Date(); d.setDate(d.getDate()-i); const day=d.toISOString().slice(0,10); const c=db.orders.filter(o=>o.created_at.slice(0,10)===day).length; weekly.push({ date:day, orders:c }); } res.json({ visitors: db.visits.length, orders: db.orders.length, reviews: approved.length, rating_avg: Number(rating.toFixed(1)), weekly }); });
app.get('/admin',(req,res)=>{ res.sendFile(path.join(PUBLIC_DIR, 'admin.html')); });
app.listen(PORT, ()=>console.log('Rolivia demo running at http://localhost:'+PORT));
